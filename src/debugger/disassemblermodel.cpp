/*
 * LegacySPC - A portable object-oriented SPC emulator.
 * Copyright 2007-2008 by MichaÃ«l Larouche <larouche@kde.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; version 2 of the
 * License
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
#include "disassemblermodel.h"

// Qt includes
#include <QtCore/QLatin1String>
#include <QtCore/QQueue>
#include <QtCore/QStringList>
#include <QtCore/QTextStream>
#include <QtCore/QIODevice>

// LegacySPC includes
#include <memorymap.h>
#include <processor.h>
#include <processorregisters.h>

// Local includes
#include "emulatorcontroller.h"

using namespace LegacySPC;

//BEGIN Disassembler static data
struct DisassemblerEntry
{
	DisassemblerEntry()
	 : opcode(0), numBytes(1), prettyOpcodeIndex(0)
	{
	}

	DisassemblerEntry(byte t_opcode, int t_prettyOpcodeIndex, int t_numBytes, int arg1, int arg2, int arg3)
	 : opcode(t_opcode), prettyOpcodeIndex(t_prettyOpcodeIndex), numBytes(t_numBytes)
	{
		args[0] = arg1;
		args[1] = arg2;
		args[2] = arg3;
	}

	byte opcode;
	int prettyOpcodeIndex;
	int numBytes;
	int args[3];
};

// Generated by Ruby script generate_spc_opcode_list.rb
const char prettyOpcodeName[][10] = {
"ADC","ADDW","AND","AND1","ASL","BBC0","BBC1","BBC2","BBC3","BBC4","BBC5","BBC6","BBC7","BBS0","BBS1","BBS2","BBS3","BBS4","BBS5","BBS6","BBS7","BCC","BCS","BEQ","BMI","BNE","BPL","BRA","BRK","BVC","BVS","CALL","CBNE","CLR0","CLR1","CLR2","CLR3","CLR4","CLR5","CLR6","CLR7","CLRC","CLRP","CLRV","CMP","CMPW","DAA","DAS","DBNZ","DEC","DECW","DI","DIV","EI","EOR","EOR1","INC","INCW","JMP","LSR","MOV","MOV1","MOVW","MUL","NOP","NOT1","NOTC","OR","OR1","PCALL","POP","PUSH","RET","RET1","ROL","ROR","SBC","SET0","SET1","SET2","SET3","SET4","SET5","SET6","SET7","SETC","SETP","SLEEP","STOP","SUBW","TCLR1","TSET1","UNK","XCN"
};

enum PrettyOpcodeIndex {
ADC_Pretty = 0,
ADDW_Pretty = 1,
AND_Pretty = 2,
AND1_Pretty = 3,
ASL_Pretty = 4,
BBC0_Pretty = 5,
BBC1_Pretty = 6,
BBC2_Pretty = 7,
BBC3_Pretty = 8,
BBC4_Pretty = 9,
BBC5_Pretty = 10,
BBC6_Pretty = 11,
BBC7_Pretty = 12,
BBS0_Pretty = 13,
BBS1_Pretty = 14,
BBS2_Pretty = 15,
BBS3_Pretty = 16,
BBS4_Pretty = 17,
BBS5_Pretty = 18,
BBS6_Pretty = 19,
BBS7_Pretty = 20,
BCC_Pretty = 21,
BCS_Pretty = 22,
BEQ_Pretty = 23,
BMI_Pretty = 24,
BNE_Pretty = 25,
BPL_Pretty = 26,
BRA_Pretty = 27,
BRK_Pretty = 28,
BVC_Pretty = 29,
BVS_Pretty = 30,
CALL_Pretty = 31,
CBNE_Pretty = 32,
CLR0_Pretty = 33,
CLR1_Pretty = 34,
CLR2_Pretty = 35,
CLR3_Pretty = 36,
CLR4_Pretty = 37,
CLR5_Pretty = 38,
CLR6_Pretty = 39,
CLR7_Pretty = 40,
CLRC_Pretty = 41,
CLRP_Pretty = 42,
CLRV_Pretty = 43,
CMP_Pretty = 44,
CMPW_Pretty = 45,
DAA_Pretty = 46,
DAS_Pretty = 47,
DBNZ_Pretty = 48,
DEC_Pretty = 49,
DECW_Pretty = 50,
DI_Pretty = 51,
DIV_Pretty = 52,
EI_Pretty = 53,
EOR_Pretty = 54,
EOR1_Pretty = 55,
INC_Pretty = 56,
INCW_Pretty = 57,
JMP_Pretty = 58,
LSR_Pretty = 59,
MOV_Pretty = 60,
MOV1_Pretty = 61,
MOVW_Pretty = 62,
MUL_Pretty = 63,
NOP_Pretty = 64,
NOT1_Pretty = 65,
NOTC_Pretty = 66,
OR_Pretty = 67,
OR1_Pretty = 68,
PCALL_Pretty = 69,
POP_Pretty = 70,
PUSH_Pretty = 71,
RET_Pretty = 72,
RET1_Pretty = 73,
ROL_Pretty = 74,
ROR_Pretty = 75,
SBC_Pretty = 76,
SET0_Pretty = 77,
SET1_Pretty = 78,
SET2_Pretty = 79,
SET3_Pretty = 80,
SET4_Pretty = 81,
SET5_Pretty = 82,
SET6_Pretty = 83,
SET7_Pretty = 84,
SETC_Pretty = 85,
SETP_Pretty = 86,
SLEEP_Pretty = 87,
STOP_Pretty = 88,
SUBW_Pretty = 89,
TCLR1_Pretty = 90,
TSET1_Pretty = 91,
UNK_Pretty = 92,
XCN_Pretty = 93
};

enum ArgumentTypeEnum {
IndirectAbsolutePlusX_Argument,
DirectPage_Argument,
A_Argument,
Bit_Argument,
AbsolutePlusX_Argument,
IndirectY_Argument,
X_Argument,
Carry_Argument,
IndirectDirectPagePlusY_Argument,
Relative_Argument,
DirectPagePlusX_Argument,
IndirectX_Argument,
Y_Argument,
AbsolutePlusY_Argument,
DirectPagePlusY_Argument,
Absolute_Argument,
IndirectXAutoIncrement_Argument,
StackPointer_Argument,
IndirectDirectPagePlusX_Argument,
YA_Argument,
Immediate_Argument,
ProgramStatusWard_Argument,
ComplementBit_Argument
};

DisassemblerEntry disassemblerTable[0xFF+1] = {
DisassemblerEntry(0x0, NOP_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x2, CLR0_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x3, BBS0_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x4, OR_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x5, OR_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x6, OR_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0x7, OR_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0x8, OR_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x9, OR_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xa, OR1_Pretty, 3, Carry_Argument,Relative_Argument,Bit_Argument),
DisassemblerEntry(0xb, ASL_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xc, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xd, PUSH_Pretty, 1, ProgramStatusWard_Argument,-1,-1),
DisassemblerEntry(0xe, TSET1_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0xf, BRK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x10, BPL_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x11, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x12, SET0_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x13, BBC0_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x14, OR_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0x15, OR_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0x16, OR_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0x17, OR_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0x18, OR_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x19, OR_Pretty, 1, IndirectX_Argument,IndirectY_Argument,-1),
DisassemblerEntry(0x1a, DECW_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x1b, ASL_Pretty, 2, DirectPagePlusX_Argument,-1,-1),
DisassemblerEntry(0x1c, ASL_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0x1d, DEC_Pretty, 1, X_Argument,-1,-1),
DisassemblerEntry(0x1e, CMP_Pretty, 3, X_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x1f, JMP_Pretty, 3, IndirectAbsolutePlusX_Argument,-1,-1),
DisassemblerEntry(0x20, CLRP_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x21, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x22, CLR1_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x23, BBS1_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x24, AND_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x25, AND_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x26, AND_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0x27, AND_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0x28, AND_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x29, AND_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x2a, OR1_Pretty, 3, Carry_Argument,ComplementBit_Argument,Bit_Argument),
DisassemblerEntry(0x2b, ROL_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x2c, ROL_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x2d, PUSH_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0x2e, CBNE_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x2f, BRA_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x30, BMI_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x31, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x32, SET1_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x33, BBC1_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x34, AND_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0x35, AND_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0x36, AND_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0x37, AND_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0x38, AND_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x39, AND_Pretty, 1, IndirectX_Argument,IndirectY_Argument,-1),
DisassemblerEntry(0x3a, INCW_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x3b, ROL_Pretty, 2, DirectPagePlusX_Argument,-1,-1),
DisassemblerEntry(0x3c, ROL_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0x3d, INC_Pretty, 1, X_Argument,-1,-1),
DisassemblerEntry(0x3e, CMP_Pretty, 2, X_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x3f, CALL_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x40, SETP_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x41, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x42, CLR2_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x43, BBS2_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x44, EOR_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x45, EOR_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x46, EOR_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0x47, EOR_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0x48, EOR_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x49, EOR_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x4a, AND1_Pretty, 3, Carry_Argument,Relative_Argument,Bit_Argument),
DisassemblerEntry(0x4b, LSR_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x4c, LSR_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x4d, PUSH_Pretty, 1, X_Argument,-1,-1),
DisassemblerEntry(0x4e, TCLR1_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x4f, PCALL_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x50, BVC_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x51, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x52, SET2_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x53, BBC2_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x54, EOR_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0x55, EOR_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0x56, EOR_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0x57, EOR_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0x58, EOR_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x59, EOR_Pretty, 1, IndirectX_Argument,IndirectY_Argument,-1),
DisassemblerEntry(0x5a, CMPW_Pretty, 2, YA_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x5b, LSR_Pretty, 2, DirectPagePlusX_Argument,-1,-1),
DisassemblerEntry(0x5c, LSR_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0x5d, MOV_Pretty, 1, X_Argument,A_Argument,-1),
DisassemblerEntry(0x5e, CMP_Pretty, 3, Y_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x5f, JMP_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x60, CLRC_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x61, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x62, CLR3_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x63, BBS3_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x64, CMP_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x65, CMP_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x66, CMP_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0x67, CMP_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0x68, CMP_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x69, CMP_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x6a, AND1_Pretty, 3, Carry_Argument,ComplementBit_Argument,Bit_Argument),
DisassemblerEntry(0x6b, ROR_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x6c, ROR_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x6d, PUSH_Pretty, 1, Y_Argument,-1,-1),
DisassemblerEntry(0x6e, DBNZ_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x6f, RET_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x70, BVS_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x71, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x72, SET3_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x73, BBC3_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x74, CMP_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0x75, CMP_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0x76, CMP_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0x77, CMP_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0x78, CMP_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x79, CMP_Pretty, 1, IndirectX_Argument,IndirectY_Argument,-1),
DisassemblerEntry(0x7a, ADDW_Pretty, 2, YA_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x7b, ROR_Pretty, 2, DirectPagePlusX_Argument,-1,-1),
DisassemblerEntry(0x7c, ROR_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0x7d, MOV_Pretty, 1, A_Argument,X_Argument,-1),
DisassemblerEntry(0x7e, CMP_Pretty, 2, Y_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x7f, RET1_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x80, SETC_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x81, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x82, CLR4_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x83, BBS4_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x84, ADC_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x85, ADC_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0x86, ADC_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0x87, ADC_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0x88, ADC_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x89, ADC_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x8a, EOR1_Pretty, 3, Carry_Argument,Relative_Argument,Bit_Argument),
DisassemblerEntry(0x8b, DEC_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x8c, DEC_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0x8d, MOV_Pretty, 2, Y_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x8e, POP_Pretty, 1, ProgramStatusWard_Argument,-1,-1),
DisassemblerEntry(0x8f, MOV_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x90, BCC_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0x91, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0x92, SET4_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0x93, BBC4_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0x94, ADC_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0x95, ADC_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0x96, ADC_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0x97, ADC_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0x98, ADC_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0x99, ADC_Pretty, 1, IndirectX_Argument,IndirectY_Argument,-1),
DisassemblerEntry(0x9a, SUBW_Pretty, 2, YA_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0x9b, DEC_Pretty, 2, DirectPagePlusX_Argument,-1,-1),
DisassemblerEntry(0x9c, DEC_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0x9d, MOV_Pretty, 1, X_Argument,StackPointer_Argument,-1),
DisassemblerEntry(0x9e, DIV_Pretty, 1, YA_Argument,X_Argument,-1),
DisassemblerEntry(0x9f, XCN_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0xa0, EI_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xa1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xa2, CLR5_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xa3, BBS5_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0xa4, SBC_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xa5, SBC_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0xa6, SBC_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0xa7, SBC_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0xa8, SBC_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0xa9, SBC_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xaa, MOV1_Pretty, 3, Carry_Argument,Relative_Argument,Bit_Argument),
DisassemblerEntry(0xab, INC_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xac, INC_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0xad, CMP_Pretty, 2, Y_Argument,Immediate_Argument,-1),
DisassemblerEntry(0xae, POP_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0xaf, MOV_Pretty, 1, IndirectXAutoIncrement_Argument,A_Argument,-1),
DisassemblerEntry(0xb0, BCS_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0xb1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xb2, SET5_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xb3, BBC5_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0xb4, SBC_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0xb5, SBC_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0xb6, SBC_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0xb7, SBC_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0xb8, SBC_Pretty, 3, DirectPage_Argument,Immediate_Argument,-1),
DisassemblerEntry(0xb9, SBC_Pretty, 1, IndirectX_Argument,IndirectY_Argument,-1),
DisassemblerEntry(0xba, MOVW_Pretty, 2, YA_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xbb, INC_Pretty, 2, DirectPagePlusX_Argument,-1,-1),
DisassemblerEntry(0xbc, INC_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0xbd, MOV_Pretty, 1, StackPointer_Argument,X_Argument,-1),
DisassemblerEntry(0xbe, DAS_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0xbf, MOV_Pretty, 1, A_Argument,IndirectXAutoIncrement_Argument,-1),
DisassemblerEntry(0xc0, DI_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xc1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xc2, CLR6_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xc3, BBS6_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0xc4, MOV_Pretty, 2, DirectPage_Argument,A_Argument,-1),
DisassemblerEntry(0xc5, MOV_Pretty, 3, Absolute_Argument,A_Argument,-1),
DisassemblerEntry(0xc6, MOV_Pretty, 1, IndirectX_Argument,A_Argument,-1),
DisassemblerEntry(0xc7, MOV_Pretty, 2, IndirectDirectPagePlusX_Argument,A_Argument,-1),
DisassemblerEntry(0xc8, CMP_Pretty, 2, X_Argument,Immediate_Argument,-1),
DisassemblerEntry(0xc9, MOV_Pretty, 3, Absolute_Argument,X_Argument,-1),
DisassemblerEntry(0xca, MOV1_Pretty, 3, Relative_Argument,Bit_Argument,Carry_Argument),
DisassemblerEntry(0xcb, MOV_Pretty, 2, DirectPage_Argument,Y_Argument,-1),
DisassemblerEntry(0xcc, ASL_Pretty, 3, Absolute_Argument,-1,-1),
DisassemblerEntry(0xcd, MOV_Pretty, 2, X_Argument,Immediate_Argument,-1),
DisassemblerEntry(0xce, POP_Pretty, 1, X_Argument,-1,-1),
DisassemblerEntry(0xcf, MUL_Pretty, 1, YA_Argument,-1,-1),
DisassemblerEntry(0xd0, BNE_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0xd1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xd2, SET6_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xd3, BBC6_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0xd4, MOV_Pretty, 2, DirectPagePlusX_Argument,A_Argument,-1),
DisassemblerEntry(0xd5, MOV_Pretty, 3, AbsolutePlusX_Argument,A_Argument,-1),
DisassemblerEntry(0xd6, MOV_Pretty, 3, AbsolutePlusY_Argument,A_Argument,-1),
DisassemblerEntry(0xd7, MOV_Pretty, 2, IndirectDirectPagePlusY_Argument,A_Argument,-1),
DisassemblerEntry(0xd8, MOV_Pretty, 2, DirectPage_Argument,X_Argument,-1),
DisassemblerEntry(0xd9, MOV_Pretty, 2, DirectPagePlusY_Argument,X_Argument,-1),
DisassemblerEntry(0xda, MOVW_Pretty, 2, DirectPage_Argument,YA_Argument,-1),
DisassemblerEntry(0xdb, MOV_Pretty, 2, DirectPagePlusX_Argument,Y_Argument,-1),
DisassemblerEntry(0xdc, DEC_Pretty, 1, Y_Argument,-1,-1),
DisassemblerEntry(0xdd, MOV_Pretty, 1, A_Argument,Y_Argument,-1),
DisassemblerEntry(0xde, CBNE_Pretty, 3, DirectPagePlusX_Argument,Relative_Argument,-1),
DisassemblerEntry(0xdf, DAA_Pretty, 1, A_Argument,-1,-1),
DisassemblerEntry(0xe0, CLRV_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xe1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xe2, CLR7_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xe3, BBS7_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0xe4, MOV_Pretty, 2, A_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xe5, MOV_Pretty, 3, A_Argument,Absolute_Argument,-1),
DisassemblerEntry(0xe6, MOV_Pretty, 1, A_Argument,IndirectX_Argument,-1),
DisassemblerEntry(0xe7, MOV_Pretty, 2, A_Argument,IndirectDirectPagePlusX_Argument,-1),
DisassemblerEntry(0xe8, MOV_Pretty, 2, A_Argument,Immediate_Argument,-1),
DisassemblerEntry(0xe9, MOV_Pretty, 3, X_Argument,Absolute_Argument,-1),
DisassemblerEntry(0xea, NOT1_Pretty, 3, Relative_Argument,Bit_Argument,-1),
DisassemblerEntry(0xeb, MOV_Pretty, 2, Y_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xec, MOV_Pretty, 3, Y_Argument,Absolute_Argument,-1),
DisassemblerEntry(0xed, NOTC_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xee, POP_Pretty, 1, Y_Argument,-1,-1),
DisassemblerEntry(0xef, SLEEP_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xf0, BEQ_Pretty, 2, Relative_Argument,-1,-1),
DisassemblerEntry(0xf1, UNK_Pretty, 1, -1,-1,-1),
DisassemblerEntry(0xf2, SET7_Pretty, 2, DirectPage_Argument,-1,-1),
DisassemblerEntry(0xf3, BBC7_Pretty, 3, DirectPage_Argument,Relative_Argument,-1),
DisassemblerEntry(0xf4, MOV_Pretty, 2, A_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0xf5, MOV_Pretty, 3, A_Argument,AbsolutePlusX_Argument,-1),
DisassemblerEntry(0xf6, MOV_Pretty, 3, A_Argument,AbsolutePlusY_Argument,-1),
DisassemblerEntry(0xf7, MOV_Pretty, 2, A_Argument,IndirectDirectPagePlusY_Argument,-1),
DisassemblerEntry(0xf8, MOV_Pretty, 2, X_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xf9, MOV_Pretty, 2, X_Argument,DirectPagePlusY_Argument,-1),
DisassemblerEntry(0xfa, MOV_Pretty, 3, DirectPage_Argument,DirectPage_Argument,-1),
DisassemblerEntry(0xfb, MOV_Pretty, 2, Y_Argument,DirectPagePlusX_Argument,-1),
DisassemblerEntry(0xfc, INC_Pretty, 1, Y_Argument,-1,-1),
DisassemblerEntry(0xfd, MOV_Pretty, 1, Y_Argument,A_Argument,-1),
DisassemblerEntry(0xfe, DBNZ_Pretty, 2, Y_Argument,Relative_Argument,-1),
DisassemblerEntry(0xff, STOP_Pretty, 1, -1,-1,-1)
};
//END static data


static const int NumberOfLines = 15;

class DisassemblerModel::Private
{
public:
	Private()
	 : controller(0)
	{
	}

	EmulatorController *controller;
	QList<DisassemblerModelItem> items;
};

DisassemblerModel::DisassemblerModel(EmulatorController *controller, QObject *parent)
 : QAbstractListModel(parent), d(new Private)
{
	d->controller = controller;
}

DisassemblerModel::~DisassemblerModel()
{
	delete d;
}

int DisassemblerModel::rowCount(const QModelIndex &) const
{
	return NumberOfLines;
}

QVariant DisassemblerModel::data(const QModelIndex &index, int role) const
{
	if( !index.isValid() )
		return QVariant();

	if( index.row() >= d->items.size() )
		return QVariant();

	if( role == Qt::DisplayRole )
	{
		DisassemblerModelItem item = d->items[index.row()];
		return item.disassemblerOutput;
	}

	return QVariant();
}

void DisassemblerModel::processorUpdated(LegacySPC::Processor *processor)
{
	d->items.clear();

	word currentPC = processor->registers()->programCounter();
	// TODO: Manage a buffer
	for(int i=0; i<NumberOfLines; i++)
	{
		d->items.append( decodeInstruction(&currentPC) );
	}

	emit layoutChanged();
}

DisassemblerModelItem DisassemblerModel::decodeInstruction(word *currentPC)
{
	DisassemblerModelItem newItem;

	QTextStream resultStream;
	QString result;
	resultStream.setString(&result, QIODevice::WriteOnly);

	byte readByte = d->controller->memory()->readByte( *currentPC );
	DisassemblerEntry entry = disassemblerTable[readByte];

	newItem.ramIndex = *currentPC;
	newItem.opcodeSize = entry.numBytes;

	// Print the RAM address
	resultStream << "0x" << QString::number( static_cast<int>(*currentPC), 16) << QLatin1String(": ");

	// Fetch the values (if any)
	QQueue<byte> values;
	int numBytesToFetch = entry.numBytes-1;
	
	for(int i=0; i<numBytesToFetch; i++)
	{
		values.enqueue( d->controller->memory()->readByte( ++(*currentPC) ) );
	}
	// Output bytes
	QString tempNumber = QString::number(readByte,16).toUpper();
	if(tempNumber.size() == 1)
	{
		tempNumber.prepend('0');
	}
	resultStream << ' ' << tempNumber << ' ';
	foreach(byte argByte, values)
	{
		QString tempNumber = QString::number(argByte,16).toUpper();
		if(tempNumber.size() == 1)
		{
			tempNumber.prepend('0');
		}
		resultStream << tempNumber << ' ';
	}

	// Add padding
	int spaces=0;
	switch(numBytesToFetch)
	{
		case 0:
			spaces = 10;
			break;
		case 1:
			spaces = 7;
			break;
		case 2:
			spaces = 4;
			break;
	}

	for(int i=0; i<spaces; i++)
	{
		resultStream << ' ';
	}

	// Print the opcode
	resultStream << QString(prettyOpcodeName[entry.prettyOpcodeIndex]);
	resultStream << ' ';

	QStringList arguments;
	// Add the arguments to the output
	for(int i=0; i<3; i++)
	{
		int argument = entry.args[i];

		switch(argument)
		{
			case Immediate_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("#$%1").arg( QString::number(tempValue,16) );

				arguments << tempArg;
				break;
			}
			case Absolute_Argument:
			{
				int firstByte = static_cast<int>(values.dequeue());
				int secondByte = static_cast<int>(values.dequeue());

				word absValue;
				absValue.setLowByte(firstByte);
				absValue.setHighByte(secondByte);

				QString tempArg = QString("$%1").arg( QString::number( static_cast<int>(absValue),16) );
				arguments << tempArg;
				break;
			}
			case AbsolutePlusX_Argument:
			{
				int firstByte = static_cast<int>(values.dequeue());
				int secondByte = static_cast<int>(values.dequeue());

				word absValue;
				absValue.setLowByte(firstByte);
				absValue.setHighByte(secondByte);

				QString tempArg = QString("$%1+X").arg( QString::number( static_cast<int>(absValue),16) );
				arguments << tempArg;
				break;
			}
			case AbsolutePlusY_Argument:
			{
				int firstByte = static_cast<int>(values.dequeue());
				int secondByte = static_cast<int>(values.dequeue());

				word absValue;
				absValue.setLowByte(firstByte);
				absValue.setHighByte(secondByte);

				QString tempArg = QString("$%1+Y").arg( QString::number( static_cast<int>(absValue),16) );
				arguments << tempArg;
				break;
			}
			case IndirectAbsolutePlusX_Argument:
			{
				int firstByte = static_cast<int>(values.dequeue());
				int secondByte = static_cast<int>(values.dequeue());

				word absValue;
				absValue.setLowByte(firstByte);
				absValue.setHighByte(secondByte);

				QString tempArg = QString("[$%1+X]").arg( QString::number( static_cast<int>(absValue),16) );
				arguments << tempArg;
				break;
			}
			case IndirectDirectPagePlusX_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("[D$%1+X").arg( QString::number(tempValue,16) );
				arguments << tempArg;
				break;
			}
			case IndirectDirectPagePlusY_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("[D$%1+Y").arg( QString::number(tempValue,16) );
				arguments << tempArg;
				break;
			}
			case Relative_Argument:
			{
				offset tempValue = static_cast<offset>(values.dequeue());

				// Add the offset to the current ramIndex
				word realAddress = static_cast<word>(*currentPC + tempValue) + 1;

				QString tempArg = QString("$%1").arg( QString::number(static_cast<int>(realAddress),16) );
				arguments << tempArg;
				break;
			}
			case DirectPage_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("D$%1").arg( QString::number(tempValue,16) );
				arguments << tempArg;
				break;
			}
			case DirectPagePlusX_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("D$%1+X").arg( QString::number(tempValue,16) );
				arguments << tempArg;
				break;
			}
			case DirectPagePlusY_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("D$%1+Y").arg( QString::number(tempValue,16) );
				arguments << tempArg;
				break;
			}
			case Bit_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				arguments << QString::number(tempValue);
				break;
			}
			case ComplementBit_Argument:
			{
				int tempValue = static_cast<int>(values.dequeue());

				QString tempArg = QString("/%1").arg( QString::number(tempValue) );
				arguments << tempArg;
				break;
			}
			case A_Argument:
				arguments << QLatin1String("A");
				break;
			case X_Argument:
				arguments << QLatin1String("X");
				break;
			case Y_Argument:
				arguments << QLatin1String("Y");
				break;
			case YA_Argument:
				arguments << QLatin1String("YA");
				break;
			case StackPointer_Argument:
				arguments << QLatin1String("SP");
				break;
			case ProgramStatusWard_Argument:
				arguments << QLatin1String("PSW");
				break;
			case IndirectX_Argument:
				arguments << QLatin1String("(X)");
				break;
			case IndirectXAutoIncrement_Argument:
				arguments << QLatin1String("(X)+");
				break;
			case IndirectY_Argument:
				arguments << QLatin1String("(Y)");
				break;
			case Carry_Argument:
				arguments <<  QLatin1String("C");
				break;
			default:
			{
				break;
			}
		}
	}

	//resultStream << ' ';
	// Output arguments to result
	resultStream << arguments.join(", ");

	newItem.disassemblerOutput = result;

	(*currentPC)++;

	return newItem;
}

#include "disassemblermodel.moc"
